<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	   xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:websocket="http://www.springframework.org/schema/websocket"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop 
	                    http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/tx 
	                    http://www.springframework.org/schema/tx/spring-tx.xsd
	                    http://www.springframework.org/schema/data/jpa
	                    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
				        http://www.springframework.org/schema/data/elasticsearch
						http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd
						http://www.springframework.org/schema/cache
						http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
						http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
						">


	<!-- 过滤掉controller  -->
	<!-- <context:component-scan base-package="com.jz.bigdata">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
    </context:component-scan> -->
	<!--   <tx:annotation-driven transaction-manager="transactionManager" />
    <context:annotation-config />    
    <context:component-scan base-package="com.jz.bigdata" /> -->
	<!-- <context:component-scan base-package="com.jz.bigdata">
	</context:component-scan> 
     -->


	<!-- 过滤掉Controller防止获取两次controller导致事务失效 -->
	<context:component-scan base-package="com.jz.bigdata">
		<!-- 	<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/> -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 启动对@AspectJ注解的支持 -->
	<!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  -->
	<!-- 注：对于单利模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->

	<!--如果不写proxy-target-class="true"这句话也没问题-->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->

	<!-- ehcache -->
	<cache:annotation-driven cache-manager="cacheManager"/>
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehcache"></property>
	</bean>

	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache-setting.xml"></property>
	</bean>

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
		<!-- 
		<property name="validationQuery" value="SELECT 1" />
    	<property name="testOnBorrow" value="true"/>
		 -->

	</bean>

	<!-- 电商业务数据源 jzDemo数据库 -->
	<!-- <bean id="EBDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${EBUrl}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		初始化连接大小
		<property name="initialSize" value="${initialSize}"></property>
		连接池最大数量
		<property name="maxActive" value="${maxActive}"></property>
		连接池最大空闲
		<property name="maxIdle" value="${maxIdle}"></property>
		连接池最小空闲
		<property name="minIdle" value="${minIdle}"></property>
		获取连接最大等待时间
		<property name="maxWait" value="${maxWait}"></property>
		<property name="validationQuery" value="SELECT 1" />
    	<property name="testOnBorrow" value="true"/>
	</bean>
	<bean id="hiveDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${hiveDriver}" />
		<property name="url" value="${hiveUrl}" />
		<property name="username" value="${hiveUsername}" />
		<property name="password" value="${hivePassword}" />
		初始化连接大小
		<property name="initialSize" value="${initialSize}"></property>
		连接池最大数量
		<property name="maxActive" value="${maxActive}"></property>
		连接池最大空闲
		<property name="maxIdle" value="${maxIdle}"></property>
		连接池最小空闲
		<property name="minIdle" value="${minIdle}"></property>
		获取连接最大等待时间
		<property name="maxWait" value="${maxWait}"></property>
	</bean>
	<bean id="phoenixDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${phoenixDriver}" />
		<property name="url" value="${phoenixUrl}" />
		<property name="username" value="${phoenixUsername}" />
		<property name="password" value="${phoenixPassword}" />
		初始化连接大小
		<property name="initialSize" value="${initialSize}"></property>
		连接池最大数量
		<property name="maxActive" value="${maxActive}"></property>
		连接池最大空闲
		<property name="maxIdle" value="${maxIdle}"></property>
		连接池最小空闲
		<property name="minIdle" value="${minIdle}"></property>
		获取连接最大等待时间
		<property name="maxWait" value="${maxWait}"></property>
	</bean> -->
	<!-- log配置 -->
	<bean id="logDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.LogUrl}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
		<!-- 避免数据库回收连接而连接池不知道的情况 -->
		<property name="validationQuery" value="SELECT 1"/>
		<property name="testOnBorrow" value="true"/>
	</bean>

	<!-- 事务管理带aop -->
	<!--class是引用的spring下的类 -->
	<tx:annotation-driven />
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 创建一个事务管理 ref引用的是dataSource的数据源（连接数据库配置） -->
		<property name="dataSource" ref="logDataSource"/>
	</bean>
	<!-- tx:attribute标签所配置的是作为事务的方法的命名类型。 如<tx:method name="save*" propagation="REQUIRED"/>
	 其中*为通配符，即代表以save为开头的所有方法，即表示符合此命名规则的方法作为一个事务。
	  propagation="REQUIRED"代表支持当前事务，如果当前没有事务，就新建一个事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="REQUIRED"/>
			<tx:method name="find*" read-only="true" propagation="REQUIRED"/>
			<tx:method name="select*" read-only="true" propagation="REQUIRED"/>
			<tx:method name="query*" read-only="true" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
			<!-- 开启新事务   -->
			<!-- 防止出现Exception异常无法正常回滚 -->
			<tx:method name="error*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	<!-- aop:pointcut标签配置参与事务的类，  其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut"
					  expression="(execution(* com.jz.bigdata.common.department.service..*.*(..)))"/>
		<!-- advice-ref引用的是tx:advice的id -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut"/>
	</aop:config>

	<!-- 激活自动代理功能 -->
	<!-- 通过aop命名空间的<aop:aspectj-autoproxy />声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面
	<aop:aspectj-autoproxy />有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为<aop:aspectj-autoproxy 
	 poxy-target-class="true"/>时，表示使用CGLib动态代理技术织入增强。
	不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。 -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->


	<!-- 	<bean id="txManager"   class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="logDataSource" />  
	</bean>  
  



	hive业务mapper
	<bean id="hiveSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="hiveDataSource" />
		自动扫描mapping.xml文件
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/business/bi/hive/**/*.xml"></property>
		
		<property name="plugins">  
       		<array>  
          		<bean class="com.jz.bigdata.util.MapInterceptor"/>  
       		</array>  
   		</property> 
	</bean>
	health业务mapper-->
	<bean id="healthSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/business/health/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 用户登录业务mapper -->
	<bean id="userSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/roleauthority/user/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 电商业务mapper -->
	<!-- <bean id="EBSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		自动扫描mapping.xml文件
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/business/electronicBusiness/**/*.xml"></property>
		
		<property name="plugins">  
       		<array>  
          		<bean class="com.jz.bigdata.util.MapInterceptor"/>  
       		</array>  
   		</property> 
	</bean>
	<bean id="taskSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		自动扫描mapping.xml文件
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/task/**/*.xml"></property>
		
		<property name="plugins">  
       		<array>  
          		<bean class="com.jz.bigdata.util.MapInterceptor"/>  
       		</array>  
   		</property> 
	</bean> -->
	<!-- log配置 -->
	<bean id="logSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/roleauthority/user/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 部门业务mapper -->
	<bean id="departmentSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/department/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 资产业务mapper -->
	<bean id="equipmentSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/equipment/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 审计日志业务mapper -->
	<bean id="noteSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/note/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!--权限业务mapper -->
	<bean id="functionSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/function/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 报警业务mapper -->
	<bean id="alarmSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/alarm/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 安全审计业务mapper -->
	<bean id="safeStrategySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/safeStrategy/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 菜单业务mapper -->
	<bean id="menuSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/roleauthority/menu/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 系统名称 -->
	<bean id="systemSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/roleauthority/system/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 系统名称 -->
	<bean id="roleSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/roleauthority/role/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 动作业务mapper -->
	<bean id="actionSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/action/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>

	<!-- 事件业务mapper -->
	<bean id="eventSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/event/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>

	<!-- 动作事件业务mapper -->
	<bean id="action_eventSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/action_event/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>

	<!-- 资产事件业务mapper -->
	<bean id="equipment_eventSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/equipment_event/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 资产事件业务mapper -->
	<bean id="eventGroupSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/eventGroup/**/*.xml"></property>
		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- ansj自定义词典业务mapper -->
	<bean id="ansj_dicSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/ansj_dic/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>

	<!-- assets自定义词典业务mapper -->
	<bean id="assetsSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/assets_old/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<bean id="assetSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/asset/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<bean id="assetGroupSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/assetGroup/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- url业务mapper -->
	<bean id="urlSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/url/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>

	<!-- service业务mapper -->
	<bean id="serviceInfoSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/serviceInfo/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 全局配置信息 -->
	<bean id="configurationSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/configuration/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- BI模块 -->
	<bean id="BusinessIntelligenceSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/businessIntelligence/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- alert模块 -->
	<bean id="AlertSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/alert/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 文件日志模块 -->
	<bean id="FileLogSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/fileLog/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 事件告警 -->
	<bean id="EventAlertSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/event_alert/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 数据源管理 -->
	<bean id="DataSourceSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/data_source/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 数据源-元数据管理 -->
	<bean id="DataSourceMetadataSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/data_source_metadata/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 数据源-元数据标识分类管理 -->
	<bean id="MetadataIdentifySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/data_source_metadata_identify/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 数据源-元数据标识分类管理 -->
	<bean id="TagLibrarySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/business/data_sec_govern/tag_library/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 数据源-标签管理 -->
	<bean id="DSGLabelSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/business/data_sec_govern/label/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- 数据源-标签管理 -->
	<bean id="ReportModelSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="logDataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/jz/bigdata/common/ReportModel/**/*.xml"></property>

		<property name="plugins">
			<array>
				<bean class="com.jz.bigdata.util.MapInterceptor"/>
			</array>
		</property>
	</bean>
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
	   <property name="basePackage" value="com.business.mapper"/>  
	</bean> -->
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<!-- 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.business.bi.hive" />
		<property name="sqlSessionFactoryBeanName" value="hiveSqlSessionFactory"></property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.business.bi.phoenix" />
		<property name="sqlSessionFactoryBeanName" value="phoenixSqlSessionFactory"></property>
	</bean>-->
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.business.health"/>
		<property name="sqlSessionFactoryBeanName" value="healthSqlSessionFactory"></property>
	</bean>

	<!-- 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.task" />
		<property name="sqlSessionFactoryBeanName" value="taskSqlSessionFactory"></property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.business.electronicBusiness" />
		<property name="sqlSessionFactoryBeanName" value="EBSqlSessionFactory"></property>
	</bean> -->
	<!-- log配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.roleauthority.user"/>
		<property name="sqlSessionFactoryBeanName" value="logSqlSessionFactory"></property>
	</bean>
	<!--部门配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.department"/>
		<property name="sqlSessionFactoryBeanName" value="departmentSqlSessionFactory"></property>
	</bean>
	<!--资产配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.equipment"/>
		<property name="sqlSessionFactoryBeanName" value="equipmentSqlSessionFactory"></property>
	</bean>
	<!--审计日志配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.note"/>
		<property name="sqlSessionFactoryBeanName" value="noteSqlSessionFactory"></property>
	</bean>
	<!--权限配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.function"/>
		<property name="sqlSessionFactoryBeanName" value="functionSqlSessionFactory"></property>
	</bean>
	<!--日志报警配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.alarm"/>
		<property name="sqlSessionFactoryBeanName" value="alarmSqlSessionFactory"></property>
	</bean>
	<!--安全策略配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.safeStrategy"/>
		<property name="sqlSessionFactoryBeanName" value="safeStrategySqlSessionFactory"></property>
	</bean>
	<!--菜单配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.roleauthority.menu"/>
		<property name="sqlSessionFactoryBeanName" value="menuSqlSessionFactory"></property>
	</bean>
	<!--系统配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.roleauthority.system"/>
		<property name="sqlSessionFactoryBeanName" value="systemSqlSessionFactory"></property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.roleauthority.role"/>
		<property name="sqlSessionFactoryBeanName" value="roleSqlSessionFactory"></property>
	</bean>
	<!--动作表配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.action"/>
		<property name="sqlSessionFactoryBeanName" value="actionSqlSessionFactory"></property>
	</bean>

	<!--事件表配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.event"/>
		<property name="sqlSessionFactoryBeanName" value="eventSqlSessionFactory"></property>
	</bean>
	<!--动作事件表配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.action_event"/>
		<property name="sqlSessionFactoryBeanName" value="action_eventSqlSessionFactory"></property>
	</bean>

	<!--资产事件表配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.equipment_event"/>
		<property name="sqlSessionFactoryBeanName" value="equipment_eventSqlSessionFactory"></property>
	</bean>

	<!--资产事件表配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.ansj_dic"/>
		<property name="sqlSessionFactoryBeanName" value="ansj_dicSqlSessionFactory"></property>
	</bean>
	<!--扫描ip表配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.assets_old"/>
		<property name="sqlSessionFactoryBeanName" value="assetsSqlSessionFactory"></property>
	</bean>
	<!--asset表配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.asset"/>
		<property name="sqlSessionFactoryBeanName" value="assetSqlSessionFactory"></property>
	</bean>
	<!--资产组配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.assetGroup"/>
		<property name="sqlSessionFactoryBeanName" value="assetGroupSqlSessionFactory"></property>
	</bean>
	<!--url表配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.url"/>
		<property name="sqlSessionFactoryBeanName" value="urlSqlSessionFactory"></property>
	</bean>
	<!--service表配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.serviceInfo"/>
		<property name="sqlSessionFactoryBeanName" value="serviceInfoSqlSessionFactory"></property>
	</bean>
	<!--全局配置项configuration表配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.configuration"/>
		<property name="sqlSessionFactoryBeanName" value="configurationSqlSessionFactory"></property>
	</bean>
	<!--BI模块 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.businessIntelligence"/>
		<property name="sqlSessionFactoryBeanName" value="BusinessIntelligenceSqlSessionFactory"></property>
	</bean>
	<!--alert模块 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.alert"/>
		<property name="sqlSessionFactoryBeanName" value="AlertSqlSessionFactory"></property>
	</bean>
	<!--事件组模块 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.eventGroup"/>
		<property name="sqlSessionFactoryBeanName" value="eventGroupSqlSessionFactory"></property>
	</bean>
	<!--文件日志模块 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.fileLog"/>
		<property name="sqlSessionFactoryBeanName" value="FileLogSqlSessionFactory"></property>
	</bean>
	<!--事件告警 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.event_alert"/>
		<property name="sqlSessionFactoryBeanName" value="EventAlertSqlSessionFactory"></property>
	</bean>
	<!--数据源管理 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.data_source"/>
		<property name="sqlSessionFactoryBeanName" value="DataSourceSqlSessionFactory"></property>
	</bean>
	<!--数据源-元数据管理 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.data_source_metadata"/>
		<property name="sqlSessionFactoryBeanName" value="DataSourceMetadataSqlSessionFactory"></property>
	</bean>
	<!--数据源-元数据标识分类管理 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.data_source_metadata_identify"/>
		<property name="sqlSessionFactoryBeanName" value="MetadataIdentifySqlSessionFactory"></property>
	</bean>
	<!--数据源-标签库管理 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.business.data_sec_govern.tag_library"/>
		<property name="sqlSessionFactoryBeanName" value="TagLibrarySqlSessionFactory"></property>
	</bean>
	<!--数据源-标签库管理 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.business.data_sec_govern.label"/>
		<property name="sqlSessionFactoryBeanName" value="DSGLabelSqlSessionFactory"></property>
	</bean>
	<!--报告模板 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jz.bigdata.common.ReportModel"/>
		<property name="sqlSessionFactoryBeanName" value="ReportModelSqlSessionFactory"></property>
	</bean>
	<!-- es spring官方封装测试 -->
	<!-- 远程机器 -->
	<!-- 
    <elasticsearch:transport-client id="client" cluster-nodes="${app.elasticsearch.address:124.133.246.61:9300}" cluster-name="myElasticsearchCluster" /> 
	
	<elasticsearch:repositories base-package="com.jz.bigdata.framework.spring" />
	<elasticsearch:transport-client id="client" cluster-nodes="124.133.246.61:9300" cluster-name="myElasticsearchCluster" />
	<bean id="elasticsearchTemplate" class="org.springframework.data.elasticsearch.core.ElasticsearchTemplate">
	  <constructor-arg name="client" ref="client" />
	</bean>
-->


	<!-- es 封装测试 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<property name="searchSystemEnvironment" value="true"/>
		<property name="locations">
			<list>
				<value>classpath:/elasticsearch/elasticsearch.properties</value>
			</list>
		</property>
		<property name="properties">
			<props>
				<prop key="projectx.index.dir">K:\elsearch\data</prop>
				<prop key="projectx.index.dir.create">true</prop>
			</props>
		</property>
	</bean>

	<!-- <bean id="esNode" class="org.projectx.elasticsearch.ElasticsearchNodeFactoryBean">
		<property name="configLocation">
			<value>classpath:org/projectx/elasticsearch/elasticsearch.properties</value>
		</property>
	</bean>
	
	<bean id="esNodeTamplate" class="org.projectx.elasticsearch.NodeTemplate">
		<constructor-arg ref="esNode"/>
		<constructor-arg value="${projectx.index.name}"/>
	</bean> -->


	<!-- <description>Elasticsearch索引配置</description> -->
	<context:property-placeholder/>
	<!-- 
	<bean id="esClient" class="org.projectx.elasticsearch.ElasticsearchTransportClientFactoryBean">
	 -->

	<!--<bean id="elsearch" class="com.hs.elsearch.EsConfig">
		<property name="locations">
			&lt;!&ndash; 这里是PropertiesFactoryBean类，它也有个locations属性，也是接收一个数组  &ndash;&gt;
			<list>
				<value>classpath:hosts.properties</value>
			</list>
		</property>
		&lt;!&ndash; 设置编码格式 &ndash;&gt;
		<property name="fileEncoding" value="UTF-8"></property>
	</bean>-->
	<!--
	<bean id="elasticsearch" class="com.hs.elsearch.client.EStransportclient">
		<property name="elasticsearchbean">
			<map>
				<entry key="es_ip" value="192.168.2.182"/>
				<entry key="es_port" value="9300"/>
				<entry key="es_name" value="myElasticsearchCluster"/>
			</map>
		</property>
		&lt;!&ndash;<constructor-arg ref="elsearch"/>&ndash;&gt;
	</bean>-->

	<bean id="elasticsearch" class="com.hs.elsearch.client.RestHighClient7">
		<property name="elasticsearchbean">
			<map>
				<entry key="es_ip" value="192.168.200.200"/>
				<entry key="es_port" value="9200"/>
				<entry key="es_user" value="elastic"/>
				<entry key="es_password" value="hsdata.123"/>
			</map>
		</property>
	</bean>
	<!--<bean id="esClient" class="com.jz.bigdata.framework.spring.es.elasticsearch.ElasticsearchTransportClientFactoryBean">
		<property name="transportAddresses">
			<map>
				<entry key="es_ip" value="192.168.2.182"/>
				<entry key="es_port" value="9300"/>
				<entry key="es_name" value="myElasticsearchCluster"/>
			</map>
		</property>
	</bean>-->

	<!--<bean id="clientTemplate" class="com.hs.elsearch.template.bak.ClientTemplate">
		<constructor-arg ref="elasticsearch5"/>
		&lt;!&ndash;<constructor-arg value="article"/>&ndash;&gt;
	</bean>-->
	<bean id="BulkTemplate_BulkProcessor" class="com.hs.elsearch.template.BulkTemplate_BulkProcessor">
		<constructor-arg ref="elasticsearch"/>
	</bean>

	<bean id="searchTemplate" class="com.hs.elsearch.template.SearchTemplate">
		<constructor-arg ref="elasticsearch"/>
	</bean>

	<bean id="indexTemplate" class="com.hs.elsearch.template.IndexTemplate">
		<constructor-arg ref="elasticsearch"/>
	</bean>

	<bean id="crudTemplate" class="com.hs.elsearch.template.CrudTemplate">
		<constructor-arg ref="elasticsearch"/>
	</bean>

	<bean id="globalTemplate" class="com.hs.elsearch.template.GlobalTemplate">
		<constructor-arg ref="elasticsearch"/>
	</bean>

	<bean id="logIndexDao" class="com.hs.elsearch.dao.logDao.impl.LogIndexDaoImpl">
	</bean>

	<bean id="logCrudDao" class="com.hs.elsearch.dao.logDao.impl.LogCurdDaoImpl">
	</bean>

	<bean id="logSearchDao" class="com.hs.elsearch.dao.logDao.impl.LogSearchDaoImpl">
		<!--<constructor-arg ref="clientTemplate"/>-->
	</bean>

	<bean id="flowSearchDao" class="com.hs.elsearch.dao.flowDao.impl.FlowSearchDao">
	</bean>

	<bean id="ecsSearchDao" class="com.hs.elsearch.dao.ecsDao.impl.EcsSearchDao">
	</bean>
	<bean id="searchDao" class="com.hs.elsearch.dao.searchDao.impl.SearchDaoImpl">
	</bean>
	<bean id="searchService" class="com.hs.elsearch.service.impl.SearchServiceImpl">
	</bean>
	<bean id="ibiDao" class="com.hs.elsearch.dao.biDao.impl.BIDaoImpl">
	</bean>
	<bean id="globalDao" class="com.hs.elsearch.dao.globalDao.impl.GlobalDaoImpl">
	</bean>
	<bean id="commonDao" class="com.hs.elsearch.dao.common.impl.CommonDaoImpl">
	</bean>

	<bean id="prop" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<!-- 这里是PropertiesFactoryBean类，它也有个locations属性，也是接收一个数组，跟上面一样  -->
			<list>
				<value>classpath:hosts.properties</value>
			</list>
		</property>
		<!-- 设置编码格式 -->
		<property name="fileEncoding" value="UTF-8"></property>
	</bean>
	<bean id="roleauthority" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<!-- 这里是PropertiesFactoryBean类，它也有个locations属性，也是接收一个数组，跟上面一样  -->
			<list>
				<value>classpath:database/mysql/roleauthority.properties</value>
			</list>
		</property>
		<!-- 设置编码格式 -->
		<property name="fileEncoding" value="UTF-8"></property>
	</bean>
	<bean id="logTypeConfig" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<!-- 这里是PropertiesFactoryBean类，它也有个locations属性，也是接收一个数组，跟上面一样  -->
			<list>
				<value>classpath:logTypeConfig.properties</value>
			</list>
		</property>
		<!-- 设置编码格式 -->
		<property name="fileEncoding" value="UTF-8"></property>
	</bean>
	<!--  计划任务 及cache初始化    -->
	<bean id="start_execution" class="com.jz.bigdata.common.start_execution.start" scope="singleton" init-method="init"></bean>
	<bean id="BasicJobsStart" class="com.jz.bigdata.common.start_execution.task.BasicJobsStart" scope="singleton" init-method="start"></bean>
	<!-- 系统初始化及采集器-->
<!--	<bean id="start_execution_init" class="com.jz.bigdata.business.logAnalysis.log.controller.LogController"  scope="singleton" init-method="createIndexAndMapping4Beats"></bean>-->
<!--	<bean id="start_execution_syslog" class="com.jz.bigdata.business.logAnalysis.collector.controller.CollectorController" scope="singleton" init-method="startSyslogKafkaListener"></bean>-->
<!--	<bean id="start_execution_agent" class="com.jz.bigdata.business.logAnalysis.collector.controller.CollectorController" scope="singleton" init-method="startAgentKafkaListener"></bean>-->
<!--	<bean id="start_execution_pcap4j" class="com.jz.bigdata.business.logAnalysis.collector.controller.CollectorController" scope="singleton" init-method="startPcap4jCollector"></bean>-->

	<bean id="websocket" class="com.jz.bigdata.common.machineLearning.config.WebsocketEndPoint"/>

	<websocket:handlers>
		<websocket:mapping path="/websocket" handler="websocket"/>
		<websocket:handshake-interceptors>
			<bean class="com.jz.bigdata.common.machineLearning.config.HandshakeInterceptor"/>
		</websocket:handshake-interceptors>
	</websocket:handlers>
</beans>